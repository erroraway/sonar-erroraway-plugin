name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11', '17', '20' ]
    name: Unit tests Java ${{ matrix.Java }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ matrix.Java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.Java }}
          cache: 'maven'
      - name: Build and Test
        run: mvn -B test
  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        include:
          # 8.9 LTS 
          - SONAR_SERVER_VERSION: 8.9.8.54436
            SONAR_PLUGIN_API_VERSION: 8.9.8.54436
            SONAR_PLUGIN_API_GROUPID: org.sonarsource.sonarqube
            SONAR_JAVA_VERSION: 6.15.1.26025
            SONAR_SERVER_JAVA_VERSION: 11
          # 9.9 LTS 
          - SONAR_SERVER_VERSION: 9.9.0.65466
            SONAR_PLUGIN_API_VERSION: 9.14.0.375
            SONAR_PLUGIN_API_GROUPID: org.sonarsource.api.plugin
            SONAR_JAVA_VERSION: 7.16.0.30901
            SONAR_SERVER_JAVA_VERSION: 17
          # 10.x 
          - SONAR_SERVER_VERSION: 10.0.0.68432
            SONAR_PLUGIN_API_VERSION: 9.14.0.375
            SONAR_PLUGIN_API_GROUPID: org.sonarsource.api.plugin
            SONAR_JAVA_VERSION: 7.16.1.31255
            SONAR_SERVER_JAVA_VERSION: 17
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.SONAR_SERVER_JAVA_VERSION }}
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.sonar/cache
            ~/.sonar/orchestrator/cache
          key: ${{ runner.os }}-sonar-${{ matrix.SONAR_SERVER_VERSION }}
          restore-keys: ${{ runner.os }}-sonar-${{ matrix.SONAR_SERVER_VERSION }}
      - name: Build and Test
        run: |
          mvn -B verify \
          -Dsonar.server.version=${{ matrix.SONAR_SERVER_VERSION }} \
          -Dsonar-plugin-api.version=${{ matrix.SONAR_PLUGIN_API_VERSION }} \
          -Dsonar-plugin-api.groupId=${{ matrix.SONAR_PLUGIN_API_GROUPID }} \
          -Dsonar-java.version=${{ matrix.SONAR_JAVA_VERSION }}
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'maven'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.sonar/cache
          key: ${{ runner.os }}-sonarcloud
          restore-keys: ${{ runner.os }}-sonarcloud
      - name: Build and analyze
        run: mvn -B test org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=erroraway_sonar-erroraway-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Deploy artifacts to Maven Central
        run: mvn deploy -B -e -P deploy -DskipTests
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}